<?xml version="1.0"?>
<ruleset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="WordPress Coding Standards" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/squizlabs/PHP_CodeSniffer/master/phpcs.xsd">

	<description>The Coding standard for the WordPress Coding Standards itself.</description>

	<!-- Set the memory limit to 256M.
		 For most standard PHP configurations, this means the memory limit will temporarily be raised.
		 Ref: https://github.com/squizlabs/PHP_CodeSniffer/wiki/Advanced-Usage#specifying-phpini-settings
	-->
	<ini name="memory_limit" value="256M"/>

	<!-- Strip the filepaths in reports down to the relevant bit. -->
	<arg name="basepath" value="./" />

	<!-- Check up to 8 files simultaneously. -->
	<arg name="parallel" value="8" />

	<!-- Show progress, show the error codes for each message (source). -->
	<arg value="ps" />

	<file>.</file>

		<!-- Configs -->
	<config name="minimum_supported_wp_version" value="6.0" />
	<config name="testVersion" value="7.4-" />
	<arg name="extensions" value="php"/>
	<arg name="tab-width" value="4"/>
	<arg value="sp"/>
	<arg name="extensions" value="php"/>
    <arg name="standard" value="WordPress"/>

	<exclude-pattern>node_modules/*</exclude-pattern>
	<exclude-pattern>vendor/*</exclude-pattern>
	<exclude-pattern>vendor-src/*</exclude-pattern>

    <rule ref="WordPress.Security">
        <exclude name="Squiz.WhiteSpace.SuperfluousWhitespace.EndLine"/>
		<exclude name="WordPress.Files.FileName"/>
		<exclude name="WordPress.Arrays"/>
		<exclude name="WordPress.NamingConventions.ValidVariableName"/>
		<exclude name="WordPress.CodeAnalysis.AssignmentInCondition.FoundInWhileCondition"/>
    </rule>
	<!-- Enforce PSR1 compatible namespaces. -->
	<!-- <rule ref="PSR1.Classes.ClassDeclaration"/> -->

	<!-- <rule ref="WordPress.Arrays.MultipleStatementAlignment"> -->
		<!-- <properties> -->
			<!-- <property name="alignMultilineItems" value="!=100"/> -->
			<!-- <property name="exact" value="false" phpcs-only="true"/> -->
		<!-- </properties> -->
	<!-- </rule> -->

	<rule ref="PSR2.Methods.FunctionClosingBrace"/>

	<!--
	#############################################################################
	Handbook: PHP - Formatting SQL statements.
	Ref: https://make.wordpress.org/core/handbook/best-practices/coding-standards/php/#formatting-sql-statements
	#############################################################################
	-->

	<!-- Rule: in $wpdb->prepare - %s is used for string placeholders and %d is used for integer
		 placeholders. Note that they are not 'quoted'! -->
	<rule ref="WordPress.DB.PreparedSQLPlaceholders"/>
	<!-- <rule ref="WordPress.DB.DirectDatabaseQuery" /> -->

	<!-- Covers rule:  $wpdb->prepare()... The benefit of this is that we don't have to remember
		 to manually use esc_sql(), and also that it is easy to see at a glance whether something
		 has been escaped or not, because it happens right when the query happens. -->
	<rule ref="WordPress.DB.PreparedSQL"/>

	<rule ref="WordPress.DB.RestrictedFunctions"/>
	<rule ref="WordPress.DB.RestrictedClasses"/>

</ruleset>
